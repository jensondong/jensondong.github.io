<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jenson&#39;s blog</title>
  
  <subtitle>一个在编程路上的奋斗者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-07T16:05:53.568Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jenson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VsCode的使用</title>
    <link href="http://yoursite.com/2020/05/07/vscode/"/>
    <id>http://yoursite.com/2020/05/07/vscode/</id>
    <published>2020-05-07T14:38:49.000Z</published>
    <updated>2020-05-07T16:05:53.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VsCode的安装"><a href="#VsCode的安装" class="headerlink" title="VsCode的安装"></a>VsCode的安装</h2><h2 id="VsCode的扩展插件"><a href="#VsCode的扩展插件" class="headerlink" title="VsCode的扩展插件"></a>VsCode的扩展插件</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VsCode的安装&quot;&gt;&lt;a href=&quot;#VsCode的安装&quot; class=&quot;headerlink&quot; title=&quot;VsCode的安装&quot;&gt;&lt;/a&gt;VsCode的安装&lt;/h2&gt;&lt;h2 id=&quot;VsCode的扩展插件&quot;&gt;&lt;a href=&quot;#VsCode的扩展插件&quot; c
      
    
    </summary>
    
    
      <category term="IDE" scheme="http://yoursite.com/categories/IDE/"/>
    
    
      <category term="VsCode" scheme="http://yoursite.com/tags/VsCode/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="http://yoursite.com/2020/04/29/webpack/"/>
    <id>http://yoursite.com/2020/04/29/webpack/</id>
    <published>2020-04-29T14:29:34.000Z</published>
    <updated>2020-04-29T16:40:16.586Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack是一个现代JavaScript应用程序的静态模块打包器，当Webpack处理应用程序时，它会递归地构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。<a id="more"></a></p><h2 id="为什么要使用Webpack"><a href="#为什么要使用Webpack" class="headerlink" title="为什么要使用Webpack"></a>为什么要使用Webpack</h2><p>​    以前的前端，很多静态资源、CSS、图片和JS都是手动引入HTML页面中，杂乱无章的代码混在一个文件中，想要寻找某个功能的代码很是困难，要是分开多个文件引入，又会造成HTTP请求数过多的问题。</p><p>​    为了解决这个问题，出现了许多模块化工具，其中，Webpack具有模块化和组件化的特性，它将一个项目看做一个整体，简化了开发的复杂度，提高了我们的开发效率。</p><p><img src="/2020/04/29/webpack/D:%5CJava%5Cblog%5Csource_posts%5Cwebpack%5C1031000-160bc667d3b6093a.png" alt="1031000-160bc667d3b6093a"></p><p>除此之外，Webpack在资源处理方面具有一定优势，它通过代码拆分来做资源异步加载，会消除对未引用资源的依赖，能够控制资源的处理方式，从而加快处理速度。</p><h2 id="Webpack的使用"><a href="#Webpack的使用" class="headerlink" title="Webpack的使用"></a>Webpack的使用</h2><p>初步了解了Webpack的优势后，接着了解如何使用Webpack。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Webpack可以使用npm安装，新建一个项目，在终端中转到该项目所在位置后执行下述指令就可以完成安装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局安装</span></span><br><span class="line">npm install -g webpack</span><br><span class="line"><span class="comment">//安装到项目目录</span></span><br><span class="line">npm install --save--dev webpack</span><br></pre></td></tr></table></figure><h3 id="使用Webpack的准备工作"><a href="#使用Webpack的准备工作" class="headerlink" title="使用Webpack的准备工作"></a>使用Webpack的准备工作</h3><p>1.在项目中创建一个package.json文件，这是一个标准的npm说明文件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webpack是一个现代JavaScript应用程序的静态模块打包器，当Webpack处理应用程序时，它会递归地构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>网络层</title>
    <link href="http://yoursite.com/2020/04/23/network-layer/"/>
    <id>http://yoursite.com/2020/04/23/network-layer/</id>
    <published>2020-04-23T15:05:35.000Z</published>
    <updated>2020-05-07T14:37:54.971Z</updated>
    
    <content type="html"><![CDATA[<p>​    网络层是OSI参考模型中的第三层，介于传输层和数据链路层之间，它在数据链路层提供的两个相邻端点之间的数据帧的传送功能上，进一步管理网络中的数据通信，将数据设法从源端经过若干个中间节点传送到目的端，从而向运输层提供最基本的端到端的数据传送服务。<a id="more"></a>网络层有两个重要的功能，转发和路由选择，某些计算机网络中，还有第三种重要的网络功能：连接建立（如ATM、帧中继、MPLS）。</p><p>转发涉及分组在<strong>单一的路由器</strong>中从一条入链路到一条出链路的传送。路由选择涉及<strong>一个网络的所有路由器</strong>，他们经路由选择协议共同交互，以决定分组从源到目的地节点所采用的路径，决定这些路径的算法被称为<strong>路由选择算法</strong>。转发是指将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作；路由选择是指网络范围的过程，以决定分组从源到目的地所采用的端到端路径。</p><p>每台路由器具有一张<strong>转发表</strong>。路由器通过检查到达分组首部字段的值来转发分组，然后使用该值在该路由器的<strong>转发表</strong>中索引查询，找到该首部值对应的输出链路接口。</p><p>转发问题：编址和最长前缀匹配问题</p><p><strong>转发表</strong>是由路由选择处理器计算和更新的，但<strong>转发表</strong>的一份影子副本通常会被存放在每个输入端口。有了影子副本，转发决策能在每个输入端口本地做出，无须调用中央路由选择处理器，避免了集中式处理的瓶颈。</p><p><strong>路由选择算法</strong>决定了插入路由器的<strong>转发表</strong>中的值。</p><p>分组交换机是指一台通用分组交换设备，分组交换机分为链路分组交换机和路由器，链路分组交换机基于链路层字段中的值做转发决定。路由器基于网络层字段的值做转发决定。</p><p>网络层提供了一种单一的服务，尽力而为服务。</p><p><img src="/2020/04/23/network-layer/2.png" alt="通用路由器体系结构图"></p><p><strong>路由器的4个组成部分：</strong>输入端口、交换结构（核心部位）、输出端口、路由选择处理器</p><p><strong>输入端口处理：</strong></p><p><img src="/2020/04/23/network-layer/%E8%BE%93%E5%85%A5%E7%AB%AF%E5%8F%A3%E5%A4%84%E7%90%86.jpg" alt="输入端口处理图"></p><p><strong>交换结构：</strong>三种交换技术：（1）经内存交换；（2）经总线交换；（3）经互联网络交换。</p><p><strong>输出端口处理：</strong></p><p><img src="/2020/04/23/network-layer/%E8%BE%93%E5%87%BA%E7%AB%AF%E5%8F%A3%E5%A4%84%E7%90%86.jpg" alt="输出端口处理图"></p><p>路由器缓存吸收流量负债的波动，需要的缓存数量应当等于平均往返时延乘以链路的容量。</p><p>排队引发的性能，丢包问题（稍后深入了解）</p><p><strong>路由选择处理器：</strong></p><p>通过路由选择算法进行路由处理，线路分发。</p><h2 id="路由选择控制平面"><a href="#路由选择控制平面" class="headerlink" title="路由选择控制平面"></a>路由选择控制平面</h2><p>因特网的网络层三个主要组件：IP协议；路由选择部分；互联网控制报文协议。通过这些组件，网络层可以在复杂的网络中寻找到最合适的路径，将分组从源主机移动到目的主机。</p><h4 id="IPv4："><a href="#IPv4：" class="headerlink" title="IPv4："></a>IPv4：</h4><h5 id="首部检验和的计算："><a href="#首部检验和的计算：" class="headerlink" title="首部检验和的计算："></a>首部检验和的计算：</h5><p>将首部中每两个字节作为一个数，用反码运算对这些数字求和，该和的反码存放在检验和字段，被称为因特网检验和。如何数据包首部中携带的检验和与计算所得不一致，则认为检测出现差错。</p><h5 id="为什么运输层和网络层都执行了差错检验？"><a href="#为什么运输层和网络层都执行了差错检验？" class="headerlink" title="为什么运输层和网络层都执行了差错检验？"></a>为什么运输层和网络层都执行了差错检验？</h5><p>网络层只对IP首部计算检验和，而运输层是对整个报文段计算的。</p><p>TCP/UDP与IP不一定必须属于同一个协议栈，即TCP不一定运行在IP上</p><p>一些名词解释：</p><p>子网：互联某些主机与一个路由器接口的网络形成一个子网</p><p>子网掩码：IP编址为子网分配一个地址，如：223.1.1.0/24其中/24记法有时称为子网掩码，，指示了32比特中左侧24比特定义的子网地址，和要连接到223.1.1.0/24的网络主机地址都是233.1.1.xxx的形式</p><p>因特网地址分配策略被称为无类别域间路由选择CIDR</p><p>IP地址是由因特网名字和编号分配机构ICANN管理分配，而一台主机的IP地址通常由动态主机配置协议DHCP来配置。DHCP具有将一个主机连接进一个网络的网络相关方面的自动能力</p><p><strong>管理IP地址的典型方法：</strong>网络地址转换NAT</p><p>NAT能使路由器对于外部世界看起来像一个单一IP的单一设备，使路由器对外界隐藏内部网络的细节。所有离开此内部网络的报文与进入此网络的报文都有一个相同的源地址与目的地址，NAT路由器通过使用一张NAT转换表来区分内部网络中的各个主机，转换表包含端口号与其IP地址。NAT转换表与某台主机中端口号与进程ID对照表类似。</p><p><strong>NAT虽然得到广泛应用，但很多人反对NAT，原因如下：</strong></p><p> 1.端口号是用于进程编址，而不是主机编址<br> 2.路由器通常仅应当处理高达第三层的分组<br> 3.主机应彼此直接对话，结点不应该介入修改IP地址与端口号<br> 4.应该使用IPv6来解决IP地址不足的问题</p><p>NAT的另一个问题是<strong>妨碍了P2P应用程序，</strong> 使得在某个NAT下的主机无法与另一个主机建立对<br>等方发起的一条TCP连接。</p><p><a href="https://en.wikipedia.org/wiki/Universal_Plug_and_Play">UPnP</a>：允许外部主机使用TCP或UDP向NAT化的主机发起通信会话。  </p><h2 id="IP地址路由过程"><a href="#IP地址路由过程" class="headerlink" title="IP地址路由过程"></a>IP地址路由过程</h2><p>1、当IP数据包到达主机所在局域网的路由器后，路由器会根据包头查看目的IP地址。</p><p>2、路由器拿着目的IP地址和自己的路由表分析是否在同一网络中。</p><p>3、如果在同一网络中，则将该IP数据包进行广播，如果没有则将IP数据包发送给网关，有网关分析处理进行发送。</p><h2 id="IP地址和MAC地址"><a href="#IP地址和MAC地址" class="headerlink" title="IP地址和MAC地址"></a>IP地址和MAC地址</h2><h3 id="IP地址和MAC地址的区别"><a href="#IP地址和MAC地址的区别" class="headerlink" title="IP地址和MAC地址的区别"></a>IP地址和MAC地址的区别</h3><p>IP地址：全局唯一性，使用软件来实现网络中地址管理</p><p>MAC地址：本地唯一性，使用硬件实现</p><h3 id="有了IP地址为什么还要MAC地址"><a href="#有了IP地址为什么还要MAC地址" class="headerlink" title="有了IP地址为什么还要MAC地址"></a>有了IP地址为什么还要MAC地址</h3><p>1、IP地址一般情况下容易修改和变动，具有随意性，不能再网络上固定标识一台设备。</p><p>2、MAC地址一般情况出厂时有厂家烧录到网卡中，不容易被修改，在局域范围内容易唯一定位一台设备。</p><p>3、从拓扑结构和分层上分析，IP地址属于网络层，主要功能在广域网范围内路由寻址，选择醉解路由，而MAC地址在数据链路层，要形成适合于网络媒体上传输的数据帧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    网络层是OSI参考模型中的第三层，介于传输层和数据链路层之间，它在数据链路层提供的两个相邻端点之间的数据帧的传送功能上，进一步管理网络中的数据通信，将数据设法从源端经过若干个中间节点传送到目的端，从而向运输层提供最基本的端到端的数据传送服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="IP协议" scheme="http://yoursite.com/tags/IP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>TCP&amp;UDP</title>
    <link href="http://yoursite.com/2020/04/20/TCP-UDP/"/>
    <id>http://yoursite.com/2020/04/20/TCP-UDP/</id>
    <published>2020-04-20T05:10:05.000Z</published>
    <updated>2020-04-20T06:09:05.458Z</updated>
    
    <content type="html"><![CDATA[<p>根据因特网协议栈的划分，网络体系结构可以被分为五层：物理层、链路层、网络层、运输层和应用层。<a id="more"></a></p><h2 id="一、网络体系结构"><a href="#一、网络体系结构" class="headerlink" title="一、网络体系结构"></a><strong>一、网络体系结构</strong></h2><h4 id="1、应用层"><a href="#1、应用层" class="headerlink" title="1、应用层"></a><strong>1、应用层</strong></h4><ul><li>作用：应用层是网络应用程序及他们的应用层协议存留的地方。</li><li>主要协议：HTTP，SMTP，Telnet和FTP。</li><li>交换信息的分组：报文。</li></ul><h4 id="2、运输层"><a href="#2、运输层" class="headerlink" title="2、运输层"></a><strong>2、运输层</strong></h4><ul><li>作用：在应用程序端点之间传送应用层报文。</li><li>主要协议：TCP和UDP。</li><li>交换信息的分组：报文段。</li></ul><h4 id="3、网络层"><a href="#3、网络层" class="headerlink" title="3、网络层"></a><strong>3、网络层</strong></h4><ul><li>作用：将网络层分组从一台主机移动到另一台主机。</li><li>主要协议：IP协议和路由选择协议。</li><li>交换信息的分组：数据报。</li></ul><h4 id="4、链路层"><a href="#4、链路层" class="headerlink" title="4、链路层"></a><strong>4、链路层</strong></h4><ul><li>作用：网络层必须依靠链路层的服务。特别是在每个结点，网络层将数据报下传给链路层，链路层沿着路径将数据报传递给下一个结点。在下个结点，链路层将数据报上传给网络层。</li><li>主要协议：以太网、WiFi和电缆接入网的DOCSIS协议。</li><li>交换信息的分组：帧。</li></ul><h4 id="5、物理层"><a href="#5、物理层" class="headerlink" title="5、物理层"></a><strong>5、物理层</strong></h4><p>虽然链路层的任务是将整个帧从一个网络元素移动到邻近的网络元素，而物理层的任务是将该帧中的一个一个比特从一个结点移动到下一个结点。在这层中的协议仍然是链路相关的，并且进一步与该链路的实际传输媒体相关。</p><p>接下来主要介绍两个具有代表性的运输层协议–TCP和UDP。</p><h2 id="二、UDP"><a href="#二、UDP" class="headerlink" title="二、UDP"></a><strong>二、UDP</strong></h2><p>UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p><p>它有以下几个特点：</p><p><strong>1、面向无连接</strong></p><p>首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p><p>具体来说就是：</p><pre><code>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</code></pre><p><strong>2、有单播，多播，广播的功能</strong></p><p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p><p><strong>3、UDP是面向报文的</strong></p><p>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p><p><strong>4、不可靠性</strong></p><p>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。</p><p>并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。</p><p>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p><p><strong>5、头部开销小，传输数据报文时是很高效的。</strong></p><p>UDP 头部包含了以下几个数据：</p><pre><code>两个十六位的端口号，分别为源端口（可选字段）和目标端口整个数据报文的长度整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误</code></pre><p>因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的。</p><h2 id="三、TCP"><a href="#三、TCP" class="headerlink" title="三、TCP"></a><strong>三、TCP</strong></h2><p>当一台计算机想要与另一台计算机通讯时，两台计算机之间的通信需要畅通且可靠，这样才能保证正确收发数据。例如，当你想查看网页或查看电子邮件时，希望完整且按顺序查看网页，而不丢失任何内容。当你下载文件时，希望获得的是完整的文件，而不仅仅是文件的一部分，因为如果数据丢失或乱序，都不是你希望得到的结果，于是就用到了TCP。</p><p>TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，你可以把它想象成排水管中的水流。</p><h4 id="1、TCP连接过程"><a href="#1、TCP连接过程" class="headerlink" title="1、TCP连接过程"></a><strong>1、TCP连接过程</strong></h4><p>如下图所示，可以看到建立一个TCP连接的过程为（三次握手的过程）:</p><p><img src="/2020/04/20/TCP-UDP/D:%5CJava%5Cblog%5Csource_posts%5CTCP-UDP%5C1.png" alt="1"></p><p><strong>第一次握手</strong></p><p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</p><p><strong>第二次握手</strong></p><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p><p><strong>第三次握手</strong></p><p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p><p>这里可能大家会有个疑惑：为什么 TCP 建立连接需要三次握手，而不是两次？这是因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。</p><h4 id="2、TCP断开链接"><a href="#2、TCP断开链接" class="headerlink" title="2、TCP断开链接"></a><strong>2、TCP断开链接</strong></h4><p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</p><p><strong>第一次握手</strong></p><p>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p><p><strong>第二次握手</strong></p><p>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。</p><p><strong>第三次握手</strong></p><p>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。</p><p><strong>第四次握手</strong></p><p>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</p><h4 id="3、TCP协议的特点"><a href="#3、TCP协议的特点" class="headerlink" title="3、TCP协议的特点"></a><strong>3、TCP协议的特点</strong></h4><ul><li>面向连接</li></ul><p>面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。</p><ul><li>仅支持单播传输</li></ul><p>每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。</p><ul><li>面向字节流</li></ul><p>TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。</p><ul><li>可靠传输</li></ul><p>对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。</p><ul><li>提供拥塞控制</li></ul><p>当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。</p><ul><li>TCP提供全双工通信</li></ul><p>TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）</p><h2 id="四、TCP和UDP的比较"><a href="#四、TCP和UDP的比较" class="headerlink" title="四、TCP和UDP的比较"></a>四、TCP和UDP的比较</h2><h4 id="1、对比"><a href="#1、对比" class="headerlink" title="1、对比"></a><strong>1、对比</strong></h4><table><thead><tr><th></th><th>UDP</th><th align="left">TCP</th></tr></thead><tbody><tr><td>是否连接</td><td>无连接</td><td align="left">面向连接</td></tr><tr><td>是否可靠</td><td>不可靠传输，不使用流量控制和拥塞控制</td><td align="left">可靠传输，使用流量控制和拥塞控制</td></tr><tr><td>连接个数</td><td>支持一对一，一对多，多对一和多对多交互通信</td><td align="left">只能是一对一通信</td></tr><tr><td>传输方式</td><td>面向报文</td><td align="left">面向字节流</td></tr><tr><td>首部开销</td><td>首部开销小，仅8字节</td><td align="left">首部最小20字节，最大60字节</td></tr><tr><td>适用场景</td><td>适用于实时应用（IP电话，视频会议，直播等）</td><td align="left">适用于要求可靠传输的应用</td></tr></tbody></table><h4 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a><strong>2、总结</strong></h4><ul><li>TCP向上层提供面向连接的可靠服务，UDP向上层提供无连接不可靠服务。</li><li>虽然UDP并没有TCP传输来的准确，但是也能在很多实时性要求高的地方有所作为。</li><li>对数据准确性要求高，速度可以相对较慢的，可以选用TCP。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据因特网协议栈的划分，网络体系结构可以被分为五层：物理层、链路层、网络层、运输层和应用层。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="TCP" scheme="http://yoursite.com/tags/TCP/"/>
    
      <category term="UDP" scheme="http://yoursite.com/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>vue-resource与axios</title>
    <link href="http://yoursite.com/2020/04/14/vue-resource/"/>
    <id>http://yoursite.com/2020/04/14/vue-resource/</id>
    <published>2020-04-14T12:25:06.000Z</published>
    <updated>2020-04-14T14:32:11.193Z</updated>
    
    <content type="html"><![CDATA[<p>Vue.js是数据驱动的，不推荐直接操作DOM。因此Vue要实现异步加载可以使用vue-resource或axios，而不需要使用jQuery的DOM选择器。Vue.js2.0版本及以后推荐axios来完成ajax请求。<a id="more"></a></p><h2 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h2><p>vue-resource是Vue.js的一款插件，它可以通过XMLHttpRequest或JSONP发起请求并处理响应。也就是说，$.ajax能做的事情，vue-resource插件一样也能做到，而且vue-resource的API更为简洁。另外，vue-resource还提供了非常有用的inteceptor功能，使用inteceptor可以在请求前和请求后附加一些行为，比如使用inteceptor在ajax请求时显示loading界面。</p><h5 id="vue-resource特点"><a href="#vue-resource特点" class="headerlink" title="vue-resource特点"></a>vue-resource特点</h5><p>vue-resource插件具有以下特点：</p><ul><li><p>体积小<br>vue-resource非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。</p></li><li><p>支持主流的浏览器<br>和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。</p></li><li><p>支持Promise API和URI Templates<br>Promise是ES6的特性，Promise的中文含义为“先知”，Promise对象用于异步计算。</p></li></ul><p>URI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。</p><ul><li>支持拦截器<br>拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。</li></ul><p>拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token，或者在请求失败时，提供共通的处理方式。</p><h5 id="vue-resource使用"><a href="#vue-resource使用" class="headerlink" title="vue-resource使用"></a>vue-resource使用</h5><p>1、引入vue-resource</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt; &lt;script src&#x3D;&quot;js&#x2F;vue-resource.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>2、引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 基于全局Vue对象使用http </span><br><span class="line">Vue.http.get(&#39;&#x2F;someUrl&#39;, [options]).then(successCallback, errorCallback); </span><br><span class="line">Vue.http.post(&#39;&#x2F;someUrl&#39;, [body], [options]).then(successCallback, errorCallback); </span><br><span class="line">&#x2F;&#x2F; 在一个Vue实例内使用http </span><br><span class="line">this.$http.get(&#39;&#x2F;someUrl&#39;, [options]).then(successCallback, errorCallback); </span><br><span class="line">this.$http.post(&#39;&#x2F;someUrl&#39;, [body], [options]).then(successCallback, errorCallback);</span><br></pre></td></tr></table></figure><p>在发送请求后，使用then方法来处理响应结果，then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时得回调函数。</p><p>3、then方法的回调函数也有两种写法，第一种是传统的函数写法，第二种是更为简洁的ES 6的Lambda写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 传统写法 </span><br><span class="line">this.$http.get(&#39;&#x2F;someUrl&#39;, [options]).then(function(response)&#123;</span><br><span class="line">&#x2F;&#x2F; 响应成功回调 </span><br><span class="line">&#125;, function(response)&#123; </span><br><span class="line">&#x2F;&#x2F; 响应错误回调 </span><br><span class="line">&#125;); </span><br><span class="line">&#x2F;&#x2F; Lambda写法 </span><br><span class="line">this.$http.get(&#39;&#x2F;someUrl&#39;, [options]).then((response) &#x3D;&gt; &#123; </span><br><span class="line">&#x2F;&#x2F; 响应成功回调 </span><br><span class="line">&#125;, (response) &#x3D;&gt; &#123; </span><br><span class="line">&#x2F;&#x2F; 响应错误回调 </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4、支持的HTTP方法</p><p>vue-resource的请求API是按照REST风格设计的，它提供了7种请求API：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get(url, [options])</span><br><span class="line">head(url, [options])</span><br><span class="line">delete(url, [options])</span><br><span class="line">jsonp(url, [options])</span><br><span class="line">post(url, [body], [options])</span><br><span class="line">put(url, [body], [options])</span><br><span class="line">patch(url, [body], [options])</span><br></pre></td></tr></table></figure><p>除了jsonp以外，另外6种的API名称是标准的HTTP方法。当服务端使用REST API时，客户端的编码风格和服务端的编码风格近乎一致，这可以减少前端和后端开发人员的沟通成本。</p><p>5、emulateHTTP的作用</p><p>如果Web服务器无法处理PUT, PATCH和DELETE这种REST风格的请求，你可以启用enulateHTTP现象。启用该选项后，请求会以普通的POST方法发出，并且HTTP头信息的X-HTTP-Method-Override属性会设置为实际的HTTP方法。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.http.options.emulateHTTP &#x3D; true;</span><br></pre></td></tr></table></figure><p>6、emulateJSON的作用</p><p>如果Web服务器无法处理编码为application/json的请求，你可以启用emulateJSON选项。启用该选项后，请求会以application/x-www-form-urlencoded作为MIME type，就像普通的HTML表单一样。 Vue.http.options.emulateJSON = true;</p><p>vue-resource是一个非常轻量的用于处理HTTP请求的插件，它提供了两种方式来处理HTTP请求：</p><ul><li>使用Vue.http或this.$http</li><li>使用Vue.resource或this.$resource</li></ul><hr><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p> vue2.0之后，就不再对vue-resource更新，而是推荐使用axios。基于Promise的HTTP请求客户端，可同时在浏览器和Node.js中使用.</p><h5 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h5><ul><li>在浏览器发送 XMLHttpRequests 请求</li><li>在 node.js 中发送 http请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持保护安全免受 CSRF/XSRF 攻击</li></ul><h5 id="axios的使用"><a href="#axios的使用" class="headerlink" title="axios的使用"></a>axios的使用</h5><ul><li>安装 axios<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure>在要使用的文件中引入axios<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br></pre></td></tr></table></figure></li><li>GET请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 向具有指定ID的用户发出请求</span><br><span class="line">axios.get(&#39;&#x2F;user?ID&#x3D;12345&#39;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">console.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">console.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 也可以通过 params 对象传递参数</span><br><span class="line">axios.get(&#39;&#x2F;user&#39;, &#123;</span><br><span class="line">params: &#123;</span><br><span class="line">ID: 12345</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">console.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>POST请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&#39;&#x2F;user&#39;, &#123;</span><br><span class="line">firstName: &#39;Fred&#39;,</span><br><span class="line">lastName: &#39;Flintstone&#39;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">console.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>执行多个并发请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">return axios.get(&#39;&#x2F;user&#x2F;12345&#39;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">return axios.get(&#39;&#x2F;user&#x2F;12345&#x2F;permissions&#39;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">.then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">&#x2F;&#x2F;两个请求现已完成</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li><li>axios API：可以通过将相关配置传递给 axios 来进行请求。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios(config)</span><br><span class="line">&#x2F;&#x2F; 发送一个 POST 请求</span><br><span class="line">axios(&#123;</span><br><span class="line">method: &#39;post&#39;,</span><br><span class="line">url: &#39;&#x2F;user&#x2F;12345&#39;,</span><br><span class="line">data: &#123;</span><br><span class="line">firstName: &#39;Fred&#39;,</span><br><span class="line">lastName: &#39;Flintstone&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">axios(url[, config])</span><br><span class="line">&#x2F;&#x2F; 发送一个 GET 请求 (GET请求是默认请求模式)</span><br><span class="line">axios(&#39;&#x2F;user&#x2F;12345&#39;);</span><br></pre></td></tr></table></figure></li><li>请求方法别名：</li></ul><p>为了方便起见，已经为所有支持的请求方法提供了别名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.request（config）</span><br><span class="line">axios.get（url [，config]）</span><br><span class="line">axios.delete（url [，config]）</span><br><span class="line">axios.head（url [，config]）</span><br><span class="line">axios.post（url [，data [，config]]）</span><br><span class="line">axios.put（url [，data [，config]]）</span><br><span class="line">axios.patch（url [，data [，config]]）</span><br></pre></td></tr></table></figure><p>注意:当使用别名方法时，不需要在config中指定url，method和data属性。<br>并发<br>帮助函数处理并发请求。<br>axios.all（iterable）<br>axios.spread（callback）</p><p>创建实例<br>也可以使用自定义配置创建axios的新实例。<br>axios.create（[config]）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var instance &#x3D; axios.create(&#123;</span><br><span class="line">baseURL: &#39;https:&#x2F;&#x2F;some-domain.com&#x2F;api&#x2F;&#39;,</span><br><span class="line">timeout: 1000,</span><br><span class="line">headers: &#123;&#39;X-Custom-Header&#39;: &#39;foobar&#39;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>实例方法<br>可用的实例方法如下所示。 指定的配置将与实例配置合并。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios＃request（config）</span><br><span class="line">axios＃get（url [，config]）</span><br><span class="line">axios＃delete（url [，config]）</span><br><span class="line">axios＃head（url [，config]）</span><br><span class="line">axios＃post（url [，data [，config]]）</span><br><span class="line">axios＃put（url [，data [，config]]）</span><br><span class="line">axios＃patch（url [，data [，config]]）</span><br></pre></td></tr></table></figure></li><li><p>请求配置<br>这些是用于发出请求的可用配置选项。 只有url是必需的。 如果未指定方法，请求将默认为GET。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; &#96;url&#96;是将用于请求的服务器URL</span><br><span class="line">url: &#39;&#x2F;user&#39;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;method&#96;是发出请求时使用的请求方法</span><br><span class="line">method: &#39;get&#39;, &#x2F;&#x2F; 默认</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;baseURL&#96;将被添加到&#96;url&#96;前面，除非&#96;url&#96;是绝对的。</span><br><span class="line">&#x2F;&#x2F; 可以方便地为 axios 的实例设置&#96;baseURL&#96;，以便将相对 URL 传递给该实例的方法。</span><br><span class="line">baseURL: &#39;https:&#x2F;&#x2F;some-domain.com&#x2F;api&#x2F;&#39;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;transformRequest&#96;允许在请求数据发送到服务器之前对其进行更改</span><br><span class="line">&#x2F;&#x2F; 这只适用于请求方法&#39;PUT&#39;，&#39;POST&#39;和&#39;PATCH&#39;</span><br><span class="line">&#x2F;&#x2F; 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream</span><br><span class="line"> </span><br><span class="line">transformRequest: [function (data) &#123;</span><br><span class="line">&#x2F;&#x2F; 做任何你想要的数据转换</span><br><span class="line"> </span><br><span class="line">return data;</span><br><span class="line">&#125;],</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;transformResponse&#96;允许在 then &#x2F; catch之前对响应数据进行更改</span><br><span class="line">transformResponse: [function (data) &#123;</span><br><span class="line">&#x2F;&#x2F; Do whatever you want to transform the data</span><br><span class="line"> </span><br><span class="line">return data;</span><br><span class="line">&#125;],</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;headers&#96;是要发送的自定义 headers</span><br><span class="line">headers: &#123;&#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;params&#96;是要与请求一起发送的URL参数</span><br><span class="line">&#x2F;&#x2F; 必须是纯对象或URLSearchParams对象</span><br><span class="line">params: &#123;</span><br><span class="line">ID: 12345</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;paramsSerializer&#96;是一个可选的函数，负责序列化&#96;params&#96;</span><br><span class="line">&#x2F;&#x2F; (e.g. https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;qs, http:&#x2F;&#x2F;api.jquery.com&#x2F;jquery.param&#x2F;)</span><br><span class="line">paramsSerializer: function(params) &#123;</span><br><span class="line">return Qs.stringify(params, &#123;arrayFormat: &#39;brackets&#39;&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;data&#96;是要作为请求主体发送的数据</span><br><span class="line">&#x2F;&#x2F; 仅适用于请求方法“PUT”，“POST”和“PATCH”</span><br><span class="line">&#x2F;&#x2F; 当没有设置&#96;transformRequest&#96;时，必须是以下类型之一：</span><br><span class="line">&#x2F;&#x2F; - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br><span class="line">&#x2F;&#x2F; - Browser only: FormData, File, Blob</span><br><span class="line">&#x2F;&#x2F; - Node only: Stream</span><br><span class="line">data: &#123;</span><br><span class="line">firstName: &#39;Fred&#39;</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;timeout&#96;指定请求超时之前的毫秒数。</span><br><span class="line">&#x2F;&#x2F; 如果请求的时间超过&#39;timeout&#39;，请求将被中止。</span><br><span class="line">timeout: 1000,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;withCredentials&#96;指示是否跨站点访问控制请求</span><br><span class="line">&#x2F;&#x2F; should be made using credentials</span><br><span class="line">withCredentials: false, &#x2F;&#x2F; default</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;adapter&#39;允许自定义处理请求，这使得测试更容易。</span><br><span class="line">&#x2F;&#x2F; 返回一个promise并提供一个有效的响应（参见[response docs]（＃response-api））</span><br><span class="line">adapter: function (config) &#123;</span><br><span class="line">&#x2F;* ... *&#x2F;</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;auth&#39;表示应该使用 HTTP 基本认证，并提供凭据。</span><br><span class="line">&#x2F;&#x2F; 这将设置一个&#96;Authorization&#39;头，覆盖任何现有的&#96;Authorization&#39;自定义头，使用&#96;headers&#96;设置。</span><br><span class="line">auth: &#123;</span><br><span class="line">username: &#39;janedoe&#39;,</span><br><span class="line">password: &#39;s00pers3cret&#39;</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; “responseType”表示服务器将响应的数据类型</span><br><span class="line">&#x2F;&#x2F; 包括 &#39;arraybuffer&#39;, &#39;blob&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;</span><br><span class="line">responseType: &#39;json&#39;, &#x2F;&#x2F; default</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;&#96;xsrfCookieName&#96;是要用作 xsrf 令牌的值的cookie的名称</span><br><span class="line">xsrfCookieName: &#39;XSRF-TOKEN&#39;, &#x2F;&#x2F; default</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;xsrfHeaderName&#96;是携带xsrf令牌值的http头的名称</span><br><span class="line">xsrfHeaderName: &#39;X-XSRF-TOKEN&#39;, &#x2F;&#x2F; default</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;onUploadProgress&#96;允许处理上传的进度事件</span><br><span class="line">onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">&#x2F;&#x2F; 使用本地 progress 事件做任何你想要做的</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;onDownloadProgress&#96;允许处理下载的进度事件</span><br><span class="line">onDownloadProgress: function (progressEvent) &#123;</span><br><span class="line">&#x2F;&#x2F; Do whatever you want with the native progress event</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;maxContentLength&#96;定义允许的http响应内容的最大大小</span><br><span class="line">maxContentLength: 2000,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;validateStatus&#96;定义是否解析或拒绝给定的promise</span><br><span class="line">&#x2F;&#x2F; HTTP响应状态码。如果&#96;validateStatus&#96;返回&#96;true&#96;（或被设置为&#96;null&#96; promise将被解析;否则，promise将被</span><br><span class="line">  &#x2F;&#x2F; 拒绝。</span><br><span class="line">validateStatus: function (status) &#123;</span><br><span class="line">return status &gt;&#x3D; 200 &amp;&amp; status &lt; 300; &#x2F;&#x2F; default</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;maxRedirects&#96;定义在node.js中要遵循的重定向的最大数量。</span><br><span class="line">&#x2F;&#x2F; 如果设置为0，则不会遵循重定向。</span><br><span class="line">maxRedirects: 5, &#x2F;&#x2F; 默认</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#96;httpAgent&#96;和&#96;httpsAgent&#96;用于定义在node.js中分别执行http和https请求时使用的自定义代理。</span><br><span class="line">&#x2F;&#x2F; 允许配置类似&#96;keepAlive&#96;的选项，</span><br><span class="line">&#x2F;&#x2F; 默认情况下不启用。</span><br><span class="line">httpAgent: new http.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line">httpsAgent: new https.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; &#39;proxy&#39;定义代理服务器的主机名和端口</span><br><span class="line">&#x2F;&#x2F; &#96;auth&#96;表示HTTP Basic auth应该用于连接到代理，并提供credentials。</span><br><span class="line">&#x2F;&#x2F; 这将设置一个&#96;Proxy-Authorization&#96; header，覆盖任何使用&#96;headers&#96;设置的现有的&#96;Proxy-Authorization&#96; 自定义 headers。</span><br><span class="line">proxy: &#123;</span><br><span class="line">host: &#39;127.0.0.1&#39;,</span><br><span class="line">port: 9000,</span><br><span class="line">auth: : &#123;</span><br><span class="line">username: &#39;mikeymike&#39;,</span><br><span class="line">password: &#39;rapunz3l&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; “cancelToken”指定可用于取消请求的取消令牌</span><br><span class="line">&#x2F;&#x2F; (see Cancellation section below for details)</span><br><span class="line">cancelToken: new CancelToken(function (cancel) &#123;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 then 时，将收到如下响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#39;&#x2F;user&#x2F;12345&#39;)</span><br><span class="line">.then(function(response) &#123;</span><br><span class="line">console.log(response.data);</span><br><span class="line">console.log(response.status);</span><br><span class="line">console.log(response.statusText);</span><br><span class="line">console.log(response.headers);</span><br><span class="line">console.log(response.config);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>配置默认值<br>1、全局axios默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL &#x3D; &#39;https:&#x2F;&#x2F;api.example.com&#39;;</span><br><span class="line">axios.defaults.headers.common[&#39;Authorization&#39;] &#x3D; AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;x-www-form-urlencoded&#39;;</span><br></pre></td></tr></table></figure><p>2、自定义实例默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在创建实例时设置配置默认值</span><br><span class="line">var instance &#x3D; axios.create（&#123;</span><br><span class="line">   baseURL：&#39;https:&#x2F;&#x2F;api.example.com&#39;</span><br><span class="line">&#125;）;</span><br><span class="line">&#x2F;&#x2F;在实例创建后改变默认值</span><br><span class="line">instance.defaults.headers.common [&#39;Authorization&#39;] &#x3D; AUTH_TOKEN;</span><br></pre></td></tr></table></figure><p>3、配置优先级顺序<br>配置将与优先顺序合并。 顺序是lib / defaults.js中的库默认值，然后是实例的defaults属性，最后是请求的config参数。 后者将优先于前者。 这里有一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用库提供的配置默认值创建实例</span><br><span class="line">&#x2F;&#x2F;此时，超时配置值为&#96;0&#96;，这是库的默认值</span><br><span class="line">var instance &#x3D; axios.create（）;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;覆盖库的超时默认值</span><br><span class="line">&#x2F;&#x2F;现在所有请求将在超时前等待2.5秒</span><br><span class="line">instance.defaults.timeout &#x3D; 2500;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;覆盖此请求的超时，因为它知道需要很长时间</span><br><span class="line">instance.get(&#39;&#x2F; longRequest&#39;，&#123;</span><br><span class="line">   timeout：5000</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>拦截器<br>你可以截取请求或响应在被 then 或者 catch 处理之前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function(config)&#123;</span><br><span class="line">     &#x2F;&#x2F;在发送请求之前做某事</span><br><span class="line">     return config;</span><br><span class="line">   &#125;，function（error）&#123;</span><br><span class="line">     &#x2F;&#x2F;请求错误时做些事</span><br><span class="line">     return Promise.reject(error);</span><br><span class="line">   &#125;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function(response)&#123;</span><br><span class="line">     &#x2F;&#x2F;对响应数据做些事</span><br><span class="line">     return response;</span><br><span class="line">   &#125;，function(error)&#123;</span><br><span class="line">     &#x2F;&#x2F;请求错误时做些事</span><br><span class="line">     return Promise.reject（error）;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>如果你以后可能需要删除拦截器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myInterceptor &#x3D; axios.interceptors.request.use(function () &#123;&#x2F;*...*&#x2F;&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><p>你可以将拦截器添加到axios的自定义实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var instance &#x3D; axios.create();</span><br><span class="line">instance.interceptors.request.use(function () &#123;&#x2F;*...*&#x2F;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>处理错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#39;&#x2F; user &#x2F; 12345&#39;)</span><br><span class="line">   .catch(function(error)&#123;</span><br><span class="line">     if(error.response)&#123;</span><br><span class="line">       &#x2F;&#x2F;请求已发出，但服务器使用状态代码进行响应</span><br><span class="line">       &#x2F;&#x2F;落在2xx的范围之外</span><br><span class="line">       console.log（error.response.data）;</span><br><span class="line">       console.log（error.response.status）;</span><br><span class="line">       console.log（error.response.headers）;</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">       &#x2F;&#x2F;在设置触发错误的请求时发生了错误</span><br><span class="line">       console.log（&#39;Error&#39;，error.message）;</span><br><span class="line">     &#125;&#125;</span><br><span class="line">     console.log（error.config）;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>您可以使用validateStatus配置选项定义自定义HTTP状态码错误范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#39;&#x2F; user &#x2F; 12345&#39;，&#123;</span><br><span class="line">   validateStatus：function（status）&#123;</span><br><span class="line">     return status &lt; 500; &#x2F;&#x2F;仅当状态代码大于或等于500时拒绝</span><br><span class="line">   &#125;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>消除<br>您可以使用取消令牌取消请求。<br>axios cancel token API基于可取消的promise提议，目前处于阶段1<br>您可以使用CancelToken.source工厂创建一个取消令牌，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var CancelToken &#x3D; axios.CancelToken;</span><br><span class="line">var source &#x3D; CancelToken.source（）;</span><br><span class="line"> </span><br><span class="line">axios.get(&#39;&#x2F;user&#x2F;12345&#39;, &#123;</span><br><span class="line">cancelToken: source.token</span><br><span class="line">&#125;).catch(function(thrown) &#123;</span><br><span class="line">if (axios.isCancel(thrown)) &#123;</span><br><span class="line">console.log(&#39;Request canceled&#39;, thrown.message);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F; 处理错误</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;取消请求（消息参数是可选的）</span><br><span class="line"></span><br><span class="line">source.cancel（&#39;操作被用户取消。&#39;）;</span><br></pre></td></tr></table></figure><p>您还可以通过将执行器函数传递给CancelToken构造函数来创建取消令牌：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var CancelToken &#x3D; axios.CancelToken;</span><br><span class="line">var cancel;</span><br><span class="line"> </span><br><span class="line">axios.get（&#39;&#x2F; user &#x2F; 12345&#39;，&#123;</span><br><span class="line">   cancelToken：new CancelToken（function executor（c）&#123;</span><br><span class="line">     &#x2F;&#x2F;一个执行器函数接收一个取消函数作为参数</span><br><span class="line">     cancel &#x3D; c;</span><br><span class="line">   &#125;）</span><br><span class="line">&#125;）;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 取消请求</span><br><span class="line">clear();</span><br></pre></td></tr></table></figure><p>注意：您可以使用相同的取消令牌取消几个请求。</p></li><li><p>使用application / x-www-form-urlencoded格式<br>默认情况下，axios将JavaScript对象序列化为JSON。 要以应用程序/ x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。</p></li></ul><p>1、浏览器<br>在浏览器中，您可以使用URLSearchParams API，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var params &#x3D; new URLSearchParams();</span><br><span class="line">params.append(&#39;param1&#39;, &#39;value1&#39;);</span><br><span class="line">params.append(&#39;param2&#39;, &#39;value2&#39;);</span><br><span class="line">axios.post(&#39;&#x2F;foo&#39;, params);</span><br></pre></td></tr></table></figure><p>请注意，所有浏览器都不支持URLSearchParams，但是有一个polyfill可用（确保polyfill全局环境）。<br>或者，您可以使用qs库对数据进行编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var qs &#x3D; require(&#39;qs&#39;);</span><br><span class="line">axios.post(&#39;&#x2F;foo&#39;, qs.stringify(&#123; &#39;bar&#39;: 123 &#125;);</span><br></pre></td></tr></table></figure><p>2、Node.js<br>在node.js中，可以使用querystring模块，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var querystring &#x3D; require(&#39;querystring&#39;);</span><br><span class="line">axios.post(&#39;http:&#x2F;&#x2F;something.com&#x2F;&#39;, querystring.stringify(&#123; foo: &#39;bar&#39; &#125;);</span><br></pre></td></tr></table></figure><p>3、TypeScript<br>axios包括TypeScript定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;;</span><br><span class="line">axios.get(&#39;&#x2F;user?ID&#x3D;12345&#39;);</span><br></pre></td></tr></table></figure><p>axios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。</p><h2 id="vue-resource和axios的区别"><a href="#vue-resource和axios的区别" class="headerlink" title="vue-resource和axios的区别"></a>vue-resource和axios的区别</h2><p>vue-resources不再更新了，vue作者尤大推荐axios。</p><ul><li>axios<br>在浏览器里建立XHR<br>通过nodejs进行http请求<br>转换或者拦截请求数据或响应数据<br>支持Promise的API<br>可以取消请求<br>自动转换JSON<br>可以防御XSRF攻击！</li><li>vue-resources<br>只提供了浏览器版本</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue.js是数据驱动的，不推荐直接操作DOM。因此Vue要实现异步加载可以使用vue-resource或axios，而不需要使用jQuery的DOM选择器。Vue.js2.0版本及以后推荐axios来完成ajax请求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识点</title>
    <link href="http://yoursite.com/2020/04/07/summary/"/>
    <id>http://yoursite.com/2020/04/07/summary/</id>
    <published>2020-04-07T09:43:40.000Z</published>
    <updated>2020-04-15T11:12:07.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a><strong>Java基础</strong></h4><h5 id="1、Java面向对象编程的三大特性："><a href="#1、Java面向对象编程的三大特性：" class="headerlink" title="1、Java面向对象编程的三大特性："></a><strong>1、Java面向对象编程的三大特性：</strong></h5><p>封装、继承、多态<br>注意：继承时父类中的私有属性和方法，子类无法访问，只是拥有。</p><a id="more"></a><h5 id="2、String、StringBuffer和StringBuilder的区别是什么？"><a href="#2、String、StringBuffer和StringBuilder的区别是什么？" class="headerlink" title="2、String、StringBuffer和StringBuilder的区别是什么？"></a><strong>2、String、StringBuffer和StringBuilder的区别是什么？</strong></h5><ul><li>可变性<br>String类中使用final关键字修饰字符数组来保存字符串，所以String对象是不可变的。<br>StringBuffer和StringBuilder都继承自AbstactStringBuilder类，也是使用字符数组保存字符串，但是没有用final关键字修饰，所以这两种对象是可变的。</li><li>线程安全性<br>String中的对象是不可变的，可以理解为常量，线程安全。StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。</li><li>性能<br>每次对String类型进行改变时，都会生成一个新的String对象，然后将指针指向新的String对象。StringBuffer每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用StringBuilder相比使用StringBuffer仅能获得10%~15%左右的性能提升，但要冒多线程不安全的风险。</li></ul><h5 id="3、在一个静态方法内调用一个非静态成员为什么是非法的？"><a href="#3、在一个静态方法内调用一个非静态成员为什么是非法的？" class="headerlink" title="3、在一个静态方法内调用一个非静态成员为什么是非法的？"></a><strong>3、在一个静态方法内调用一个非静态成员为什么是非法的？</strong></h5><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h5 id="4、接口与抽象类的区别？"><a href="#4、接口与抽象类的区别？" class="headerlink" title="4、接口与抽象类的区别？"></a><strong>4、接口与抽象类的区别？</strong></h5><p>接口的方法默认是public（Java9开始允许定义私有方法），所有方法在接口中不能有实现（Java8开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。<br>接口中除了static、final变量，不能有其他变量，而抽象类中则不一定。<br>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends关键字扩展多个接口。</p><h5 id="5、-与equals"><a href="#5、-与equals" class="headerlink" title="5、==与equals"></a><strong>5、==与equals</strong></h5><p>==：基本数据类型比较的是值，引用数据类型比较的是内存地址。<br>equals()：(1)类没有覆盖equals()方法。则比较的是内存地址。(2)类覆盖了equals()方法，比较的是内容是否相等，<br>注意：String中的equals方法是被重写过的，比较的是对象的值。当创建String类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个String对象。</p><h5 id="6、既然有了字节流，为什么还要有字符流？"><a href="#6、既然有了字节流，为什么还要有字符流？" class="headerlink" title="6、既然有了字节流，为什么还要有字符流？"></a><strong>6、既然有了字节流，为什么还要有字符流？</strong></h5><p>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那么为什么I/O流操作要分为字节流操作和字符流操作呢？<br>字符流是由Java虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以，I/O流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。</p><h5 id="7、BIO，NIO，AIO有什么区别？"><a href="#7、BIO，NIO，AIO有什么区别？" class="headerlink" title="7、BIO，NIO，AIO有什么区别？"></a><strong>7、BIO，NIO，AIO有什么区别？</strong></h5><ul><li>BIO：同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的I/O并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，在面对十万甚至百万级连接时，传统的BIO模型是无能为力的。</li><li>NIO：NIO是一种同步非阻塞的I/O模型，在Java1.4中引入NIO框架，对应java.nio包，提供了Channel，Selector，Buffer等抽象。NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。NIO提供了与传统BIO模型中的Socket和ServerSocket相对应的SocketChannel和ServerSocketChannel两种不同的套接字通道实现，两种通道都支持阻塞和非阻塞两种模式，阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性，对于高负载、高并发的(网络)应用，应使用NIO的非阻塞模式来开发</li><li>AIO：AIO也就是NIO2。在Java7中引入了NIO的改进版NIO2，它是异步非阻塞的IO模型。异步IO是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会阻塞在哪里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO是异步IO的错写，虽然NIO在网络操作中，提供了非阻塞的方法，但NIO的IO行为还是同步的。对于NIO来说，我们的业务线程是在IO操作准备好是，得到通知，接着就由这个线程自行进行IO操作，IO操作本身是同步的。目前AIO的应用还不是很广泛。</li></ul><h4 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a><strong>Java集合</strong></h4><h5 id="1、List-Set-Map的区别？"><a href="#1、List-Set-Map的区别？" class="headerlink" title="1、List,Set,Map的区别？"></a><strong>1、List,Set,Map的区别？</strong></h5><p>List：不唯一，有序<br>Set：唯一，无序<br>Map：使用键值对存储，Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以任何对象。</p><h5 id="2、ArrayList与LinkedList的区别？"><a href="#2、ArrayList与LinkedList的区别？" class="headerlink" title="2、ArrayList与LinkedList的区别？"></a><strong>2、ArrayList与LinkedList的区别？</strong></h5><p>线程安全：ArrayList和LinkedList都是不同步的，也就是不保证线程安全；<br>底层数据结构：ArrayList底层使用的是Object数组，LinkedList底层使用的是双向链表；<br>增删数据：LinkedList插入与删除比ArrayList方便；<br>数据快速随机访问：ArrayList支持快速随机访问，LinkedList不支持；（RandomAccess接口作为一个标识，标识实现这个接口的类具有随机访问功能）<br>内存控件占用：ArrayList的空间浪费主要体现在List列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间。</p><h5 id="3、ArrayList和Vector的区别？"><a href="#3、ArrayList和Vector的区别？" class="headerlink" title="3、ArrayList和Vector的区别？"></a><strong>3、ArrayList和Vector的区别？</strong></h5><p>Vector类的所有方法都是同步的，可以有两个线程安全地访问一个Vector对象，但是一个线程访问Vector的话，代码要在同步操作上耗费大量的时间；ArrayList不是同步的，所以不需要保证线程安全时建议使用ArrayList。</p><h5 id="4、HashMap和HashTable的区别？"><a href="#4、HashMap和HashTable的区别？" class="headerlink" title="4、HashMap和HashTable的区别？"></a><strong>4、HashMap和HashTable的区别？</strong></h5><ul><li>线程安全：HashMap是非线程安全的，如果需要满足线程安全，可以用Collections的synchronizedMap方法是HashMap具有线程安全的能力，或者使用ConcurrentHashMap；HashTable是线程安全的，HashTable内部的方法基本都经过synchronized修饰。</li><li>效率：因为线程安全的问题，HashMap要比HashTable效率高一点。另外，HashTable基本被淘汰，不要再代码中使用它。</li><li>对Null key和Null value的支持：HashMap中，null可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为null。但是在HashTable中put进的键值只要有一个null，直接抛出NullPointerException。</li><li>初始容量大小和每次扩充容量大小的不同：创建时如果不指定容量初始值，HashTable默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap默认的初始化大小为16，之后每次扩充，容量变为原来的2倍。创建时如果给定了容量初始值，那么HashTable会直接使用你给定的大小，而HashMap会将其扩充为2的幂次方大小（HashMap中的tableSizeFor（）方法保证，下面给出了源代码）。也就是说HashMap总是使用2的幂作为哈希表的大小，后面会介绍到为什么是2的幂次方。</li><li>底层数据结构：JDK1.8以后的HashMap在解决哈希表冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。HashTable没有这样的机制。</li></ul><h5 id="5、HashMap和HashSet的区别？"><a href="#5、HashMap和HashSet的区别？" class="headerlink" title="5、HashMap和HashSet的区别？"></a><strong>5、HashMap和HashSet的区别？</strong></h5><p>HashMap：实现了Map接口，存储键值对，调用put()向map中添加元素，HashMap使用键（Key）计算Hashcode;<br>HashSet:实现Set接口，仅存储对象，调用add()方法向Set中添加元素，HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性。</p><h5 id="6、HashMap的底层实现"><a href="#6、HashMap的底层实现" class="headerlink" title="6、HashMap的底层实现"></a><strong>6、HashMap的底层实现</strong></h5><p>JDK1.8之前HashMap底层是数组和链表结合在一起使用也就是链表散列。HashMap通过key的HashCode经过扰动函数处理过后得到hash值，然后通过（n-1)&amp;hash判断当前元素存放的位置（这里的n指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的hash值以及key是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲入。<br>所谓扰动函数指的就是HashMap的hash方法。使用hash方法也就是扰动函数是为了防止一些实现比较差的hashCode（）方法换句话说使用扰动函数之后可以减少碰撞。<br>所谓“拉链法”就是：将链表和数组相结合，也就是说创建一个链表数组，数组中每一个就是一个链表，若遇到哈希冲突，则将冲突的指加到链表中即可。（解决哈希冲突）<br>TreeMap、TreeSet以及JDK1.8之后的HashMap底层都用到了红黑树，红黑数就是为了解决二叉查找数的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。</p><h5 id="7、comparable和Comparator的区别？"><a href="#7、comparable和Comparator的区别？" class="headerlink" title="7、comparable和Comparator的区别？"></a><strong>7、comparable和Comparator的区别？</strong></h5><p>comparable接口实际上是出自java.lang包，它有一个compareTo(Object obj)方法用来排序<br>comparator接口实际上是出自java.util包，它有一个compare(Object obj1,Object obj2)方法用来排序<br>一般我们需要对一个集合使用自定义排序时，我们就要重写compareTo()方法或compare()方法，当我们需要对某一个集合实现两种排序方式，我们可以重写compareTo()方法和使用自制的Comparator方法或者以两个Comparator来分别实现两种排序</p><h5 id="8、为什么要有hashCode（散列码）"><a href="#8、为什么要有hashCode（散列码）" class="headerlink" title="8、为什么要有hashCode（散列码）?"></a><strong>8、为什么要有hashCode（散列码）?</strong></h5><p>我们先以“HashSet如何检查重复”为例子来说明为什么要有hashCode：当你把对象加入HashSet时，HashSet会先计算对象的hashcode值来判断对象加入的位置，同时也会与该位置其他已经加入的对象的hashcode值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，这时会调用equals()方法来检查hashcode相等的对象是否真的相同。如果两者相同HashSet就不会让其加入操作成功，如果不同的话，就会重新散列到其他位置，这样我们就大大减少了equals的次数，相应就大大提高了执行速度。</p><h5 id="9、为什么Java中只有值传递？"><a href="#9、为什么Java中只有值传递？" class="headerlink" title="9、为什么Java中只有值传递？"></a><strong>9、为什么Java中只有值传递？</strong></h5><p>按值调用表示方法接受的是调用者提供的值，而按引用调用表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。Java程序设计语言总是采用按值调用，也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。</p><h5 id="10、如何选用集合？"><a href="#10、如何选用集合？" class="headerlink" title="10、如何选用集合？"></a><strong>10、如何选用集合？</strong></h5><p>需要根据键值获取到元素值时就选用Map接口下的集合，需要排序时选择TreeMap，不需要排序时就选择HashMap，需要保证线程安全就选用ConcurrentHashMap，当我们只需要存放元素值时，就选择实现Collection接口的集合，需要保证元素唯一时选择实现Set接口的集合比如TreeSet或HashSet，不需要就选择实现List接口的比如ArrayList或LinkedList，然后再根据实现这些接口的集合的特点来选用。</p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><strong>多线程</strong></h4><h5 id="1、何为线程？"><a href="#1、何为线程？" class="headerlink" title="1、何为线程？"></a><strong>1、何为线程？</strong></h5><p>线程是比进程更小的执行单位，一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的堆和方法区资源，但每个线程有自己的程序计数器、虚拟机栈和本地方法栈，所以系统在产生一个线程，或是在各个线程之间切换工作时，负担要比进程小得多，因此，线程也被成为轻量级进程。<br>Java程序天生就是多线程程序，我们可以通过JMX来看一下一个普通的Java程序有哪些线程，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//获取Java线程管理MXBean</span></span><br><span class="line">ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();</span><br><span class="line"><span class="comment">//不需要获取同步的monitor和synchronizer信息，仅获取线程和线程堆栈信息</span></span><br><span class="line">ThreadInfo[] threadInfo = threadMXBean.dumpAllThreads(<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//遍历线程信息，仅打印线程ID和线程名称信息</span></span><br><span class="line"><span class="keyword">for</span>(ThreadInfo threadInfo:threadInfos)&#123;</span><br><span class="line">System.out.println(<span class="string">"["</span>+threadInfo.getThreadId()+<span class="string">"]"</span>+threadInfo.getThreadName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序输出如下：<br>[5] Attach Listener            //添加事件<br>[4] Signal Dispatcher        //分发处理给JVM信号的线程<br>[3] Finalizer            //调用对象finalize方法的线程<br>[2] Reference Handler        //清除reference线程<br>[1] main                //main线程，程序入口<br>从上面的输出内容可以看出：一个Java程序的运行是main线程和多个其他线程同时运行。</p><p><strong>2、产生线程死锁须具备的四个条件</strong></p><ul><li>互斥条件：该资源任意一个时刻只由一个线程占用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的线程保持不放。</li><li>不剥夺条件：线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才能释放资源。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><p>注：避免线程死锁只要破坏产生死锁的四个条件之一即可。</p><h5 id="3、sleep-方法和wait-方法的区别和共同点？"><a href="#3、sleep-方法和wait-方法的区别和共同点？" class="headerlink" title="3、sleep()方法和wait()方法的区别和共同点？"></a><strong>3、sleep()方法和wait()方法的区别和共同点？</strong></h5><ul><li>两者最主要的区别在于：sleep方法没有释放锁，而wait方法释放了锁。</li><li>wait()通常被用于线程间交互/通信，sleep通常被用于暂停执行。</li><li>wait()方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的notify()或者notifyAll()方法。sleep()方法执行完成后，线程会自动苏醒。或者可以使用wait(long timeout)超时后线程会自动苏醒。</li><li>两者都可以暂停线程的执行。</li></ul><h5 id="4、为什么调用start-时会执行run-方法，为什么不能直接调用run-方法？"><a href="#4、为什么调用start-时会执行run-方法，为什么不能直接调用run-方法？" class="headerlink" title="4、为什么调用start()时会执行run()方法，为什么不能直接调用run()方法？"></a><strong>4、为什么调用start()时会执行run()方法，为什么不能直接调用run()方法？</strong></h5><p>new一个Thread，线程就进入了新建状态；调用start()方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。start()会执行线程的相应准备工作，然后自动执行run()方法的内容，这是真正的多线程工作。而直接执行run()方法，会把run()方法当成一个main线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</p><h5 id="5、synchronized关键字"><a href="#5、synchronized关键字" class="headerlink" title="5、synchronized关键字"></a><strong>5、synchronized关键字</strong></h5><p>synchronized关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能由一个线程执行。</p><h6 id="synchronized关键字最主要的三种使用方式："><a href="#synchronized关键字最主要的三种使用方式：" class="headerlink" title="synchronized关键字最主要的三种使用方式："></a>synchronized关键字最主要的三种使用方式：</h6><ul><li>修饰实例方法：作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁。</li><li>修饰静态方法：也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不属于任何一个实例对象，是类成愿（static表明这是该类的一个静态资源，不管new了多少个对象，只有一份）。所以如果一个线程A调用一个实例对象的非静态synchronized方法，而线程B需要调用这个实例对象所属类的静态synchronized方法，是允许的，不会发生互斥现象，因为访问静态synchronized方法占用的锁是当前类的锁，而访问非静态synchronized方法占用的锁是当前实例对象锁。</li><li>修饰代码快：指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;&lt;strong&gt;Java基础&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&quot;1、Java面向对象编程的三大特性：&quot;&gt;&lt;a href=&quot;#1、Java面向对象编程的三大特性：&quot; class=&quot;headerlink&quot; title=&quot;1、Java面向对象编程的三大特性：&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、Java面向对象编程的三大特性：&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;封装、继承、多态&lt;br&gt;注意：继承时父类中的私有属性和方法，子类无法访问，只是拥有。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java基础" scheme="http://yoursite.com/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC回顾</title>
    <link href="http://yoursite.com/2020/04/07/springmvc/"/>
    <id>http://yoursite.com/2020/04/07/springmvc/</id>
    <published>2020-04-07T03:46:40.000Z</published>
    <updated>2020-04-11T09:23:17.185Z</updated>
    
    <content type="html"><![CDATA[<p>Spring框架提供了构建Web应用程序的全功能MVC模块–Spring MVC。Spring MVC框架提供了一个DispatcherServlet作用前端控制器来分派请求，同时提供灵活的配置处理程序映射、视图解析、语言环境和主题解析，并支持文件上传。Spring MVC还包含多种视图技术。Spring MVC分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。<a id="more"></a></p><h2 id="Spring-MVC的特点"><a href="#Spring-MVC的特点" class="headerlink" title="Spring MVC的特点"></a>Spring MVC的特点</h2><ul><li>Spring MVC拥有强大的灵活性、非侵入性和可配置性。</li><li>Spring MVC提供了一个前端控制器DispatcherServlet，开发者无须额外开发控制器对象。</li><li>Spring MVC分工明确，包括控制器、验证器、命令对象、模型对象、处理程序映射视图解析器等等，每一个功能实现由一个专门的对象负责完成。</li><li>Spring MVC可以自动绑定用户输入，并正确地转换数据类型。例如，Spring MVC能自动解析字符串，并将其设置为模型的int或float类型的属性。</li><li>Spring MVC使用一个名称/值的Map对象实现更加灵活的模型数据传输。</li><li>Spring MVC内置了常见的校验器，可以校验用户输入，如果校验不通过，则重定向回输入表单。输入校验是可选的，并且支持编程方式及声明方式。</li><li>Spring MVC支持国际化，支持根据用户区域显示多国语言。</li></ul><h2 id="一个简单的Spring-MVC应用"><a href="#一个简单的Spring-MVC应用" class="headerlink" title="一个简单的Spring MVC应用"></a>一个简单的Spring MVC应用</h2><h3 id="1、引入maven依赖"><a href="#1、引入maven依赖" class="headerlink" title="1、引入maven依赖"></a>1、引入maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、配置DispatcherServlet"><a href="#2、配置DispatcherServlet" class="headerlink" title="2、配置DispatcherServlet"></a>2、配置DispatcherServlet</h3><p>许多的MVC框架中，都包含一个用于调度控制的Servlet。Spring MVC也提供了一个前端控制器DispatcherServlet，所有的请求驱动都围绕这个DispatcherServlet来分派请求。<br>DispatcherServlet是一个Servlet(它继承自HttpServlet基类)，因此使用时需要把它配置在Web应用的部署描述符web.xml文件当中，配置信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet的名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet对应的java类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当前Servlet的参数信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--contextConfigLocation是参数名称，该参数的值包含Spring MVC的配置文件路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/springmvc-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在Web应用启动时立即加载Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet映射声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--请求对应的Servlet的名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--监听当前域的所有请求--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置了一个DispatcherServlet，该Servlet在Web应用程序启动时立即加载，DispatcherServlet加载时会需要一个Spring MVC的配置文件，默认情况下，应用会去应用程序文件夹的WEB-INF下查找对应的[servlet-name]-servlet.xml文件，例如本例的<servlet-name>是springmvc，默认查找的就是/WEB-INF/springmvc-servlet.xml。<br>本例中通过init-param元素的描述，将查找的Spring MVC配置文件位置修改为/WEB-INF/springmvc-config.xml，解析该文件内容并根据文件配置信息创建一个WebApplicationContext容器对象，也称为上下文环境。<br>WebApplication继承自ApplicationContext容器，它的初始化方式和BeanFactory、ApplicationContext有所区别，因为WebApplicationContext需要ServletContext实例，它必须在拥有Web容器的前提下才能完成启动Spring Web应用上下文的工作。</servlet-name></p><h3 id="3、Controller类的实现"><a href="#3、Controller类的实现" class="headerlink" title="3、Controller类的实现"></a>3、Controller类的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jenson.controller;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(HelloController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">logger.info(<span class="string">"hello方法被调用"</span>);</span><br><span class="line"><span class="comment">//创建准备返回的ModelAndView对象，该对象通常包含了返回视图名、模型的名称以及模型对象</span></span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//添加模型数据，可以是任意的POJO对象</span></span><br><span class="line">mv.setViewName(<span class="string">"/WEB-INF/content/welcome.jsp"</span>);</span><br><span class="line"><span class="comment">//返回ModelAndView对象</span></span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、配置Spring-MVC的Controller"><a href="#4、配置Spring-MVC的Controller" class="headerlink" title="4、配置Spring MVC的Controller"></a>4、配置Spring MVC的Controller</h3><p>本例的配置文件位置在/WEB-INF/springmvc-config.xml。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置Handle，映射“/hello”请求--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.jenson.controller.HelloController"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--处理映射器将bean的name作为url进行查找，需要在配置Handle时指定name(即url)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SimpleControllerHandlerAdapter是一个处理器适配器，所有处理适配器都要实现HandlerAdapter接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、View页面"><a href="#5、View页面" class="headerlink" title="5、View页面"></a>5、View页面</h3><p>该应用包含一个视图页面welcome.jsp，用来显示欢迎信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="meta-string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>welcome<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面可以访问Controller传递出来的message --&gt;</span></span><br><span class="line">$&#123;requestScope.message&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="详解DispatcherServlet"><a href="#详解DispatcherServlet" class="headerlink" title="详解DispatcherServlet"></a>详解DispatcherServlet</h2><p>在一个Spring MVC应用运行过程中，前端控制器DispatcherServlet具体的作用是什么呢？<br>分析DispatcherServlet源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span></span>&#123;</span><br><span class="line">initMultipartResolver(context);<span class="comment">//初始化上传文件解析器</span></span><br><span class="line">initLocaleResolver(context);<span class="comment">//初始化本地化解析器</span></span><br><span class="line">initThemeResolver(context);<span class="comment">//初始化主题解析器</span></span><br><span class="line">initHandlerMappings(context);<span class="comment">//初始化处理器映射器，将请求映射到处理器</span></span><br><span class="line">initHandlerAdapters(context);<span class="comment">//初始化处理器适配器</span></span><br><span class="line">initHandlerExceptionResolvers(context);<span class="comment">//初始化处理器异常解析器，如果执行过程中遇到异常将交给HandlerExceptionResolver来解析</span></span><br><span class="line">initRequestToViewNameTranslator(context);<span class="comment">//初始化请求到视图名称解析器</span></span><br><span class="line">initViewResolvers(context);<span class="comment">//初始化视图解析器，通过ViewResolver解析逻辑视图名到具体视图实现</span></span><br><span class="line">initFlashMapManager(context);<span class="comment">//初始化flash映射管理器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initStrategies方法将在WebApplicationContext初始化后自动执行，自动扫描上下文的Bean，根据名称或类型匹配的机制查找自定义组件，如果没有找到则会装配一套Spring的默认组件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring框架提供了构建Web应用程序的全功能MVC模块–Spring MVC。Spring MVC框架提供了一个DispatcherServlet作用前端控制器来分派请求，同时提供灵活的配置处理程序映射、视图解析、语言环境和主题解析，并支持文件上传。Spring MVC还包含多种视图技术。Spring MVC分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端开发" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Spring MVC" scheme="http://yoursite.com/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>vue中的数据双向绑定</title>
    <link href="http://yoursite.com/2020/04/06/vue-databinding/"/>
    <id>http://yoursite.com/2020/04/06/vue-databinding/</id>
    <published>2020-04-06T05:47:26.000Z</published>
    <updated>2020-04-14T14:31:50.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什么是双向数据绑定？<br>当数据发生变化时，视图也会随之发生变化，当视图发生变化时，数据也会随着视图同步变化。数据双向绑定时对于UI控件来说的，非UI控件不会涉及到数据双向绑定。</p><a id="more"></a><p>全局性数据流使用单向，方便跟踪；局部性数据流使用双向，简单易操作。</p><h2 id="实现数据双向绑定"><a href="#实现数据双向绑定" class="headerlink" title="实现数据双向绑定"></a>实现数据双向绑定</h2><p>Vue提供了v-model指令实现数据双向绑定功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--v-bind只能实现数据的单项绑定，从M自动绑定到V，无法实现数据的双向绑定--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;input type="text" v-bind:value="msg" style="width:100%"&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:100%"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//创建Vue实例，得到ViewModel</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            msg: <span class="string">'helloworld'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，v-model只能应用在表单元素中</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;什么是双向数据绑定？&lt;br&gt;当数据发生变化时，视图也会随之发生变化，当视图发生变化时，数据也会随着视图同步变化。数据双向绑定时对于UI控件来说的，非UI控件不会涉及到数据双向绑定。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="mvvm" scheme="http://yoursite.com/tags/mvvm/"/>
    
      <category term="数据绑定" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch的使用</title>
    <link href="http://yoursite.com/2020/04/04/Elasticsearch/"/>
    <id>http://yoursite.com/2020/04/04/Elasticsearch/</id>
    <published>2020-04-04T12:55:58.000Z</published>
    <updated>2020-04-11T09:22:48.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？"><a href="#用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？" class="headerlink" title="用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？"></a>用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？</h2><p>在使用数据库搜索时，我们更多的是基于精确匹配的搜索，并不支持相关性匹配，与精确匹配相比，相关性匹配更贴近人的思维方式，而Elasticsearch支持相关性匹配。<a id="more"></a><br>搜索引擎不只是搜索，还有分析，分析数据的能力，是建立在快速的查询上的，而Elasticsearch之所以能够快速查询，是因为Elasticsearch基于倒排索引，对于文档搜索来说，倒排索引在性能和空间上都有更加明显的优势。Elastic的优势还有：支持中文分词插件。</p><p>注：Elasticsearch存储数据的方式是文档存储，把对象原原本本地放进去，取出时直接取出。</p><h2 id="在Linux上使用docker安装Elasticsearch"><a href="#在Linux上使用docker安装Elasticsearch" class="headerlink" title="在Linux上使用docker安装Elasticsearch"></a>在Linux上使用docker安装Elasticsearch</h2><h3 id="1、安装Docker"><a href="#1、安装Docker" class="headerlink" title="1、安装Docker"></a>1、安装Docker</h3><p>Docker要求CentOS系统的内核版本高于3.10.<br>查看你当前的内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>若内核版本较低，可升级内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>安装Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure><p>设置Docker为开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>启动Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="2、在Docker上部署Elasticsearch"><a href="#2、在Docker上部署Elasticsearch" class="headerlink" title="2、在Docker上部署Elasticsearch"></a>2、在Docker上部署Elasticsearch</h3><h4 id="2-1、安装Elasticsearch"><a href="#2-1、安装Elasticsearch" class="headerlink" title="2.1、安装Elasticsearch"></a>2.1、安装Elasticsearch</h4><p>下载Elasticsearch镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch</span><br></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>运行Elasticsearch镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS&#x3D;&quot;-Xms256m -Xmx256m&quot; -d -p 9200:9200 -p 9300:9300 --name containerName imageId</span><br></pre></td></tr></table></figure><p>查看正在运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>在浏览器中打开http://服务器IP地址:9200,如果看到以下信息则说明安装成功</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"530dd7820315"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"docker-cluster"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"7O0fjpBJTkmn_axwmZX0RQ"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"7.2.0"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"508c38a"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2019-06-20T15:54:18.811730Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"8.0.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、修改配置，解决跨域访问问题"><a href="#2-2、修改配置，解决跨域访问问题" class="headerlink" title="2.2、修改配置，解决跨域访问问题"></a>2.2、修改配置，解决跨域访问问题</h4><p>首先进入到容器中，然后进入到指定目录修改elasticsearch.yml文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it elasticsearch &#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;</span><br><span class="line">vi elasticsearch.yml</span><br></pre></td></tr></table></figure><p>在elasticsearch.yml的文件末尾加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure><p>修改配置后重启容器即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><h4 id="2-3、安装ik分词器"><a href="#2-3、安装ik分词器" class="headerlink" title="2.3、安装ik分词器"></a>2.3、安装ik分词器</h4><p>es自带的分词器对中文分词不是很友好，所以我们下载开源的IK分词器来解决这个问题。首先进入到plugins目录中下载分词器，下载完成后然后解压，在重启es即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins&#x2F;</span><br><span class="line">elasticsearch-plugin install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v7.2.0&#x2F;elasticsearch-analysis-ik-7.2.0.zip</span><br><span class="line">exit</span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><p>注意：elasticsearch的版本和ik分词器的版本需要保持一致，不然在重启时会失败。可以在这查看所有版本，选择适合自己版本的右键复制链接地址即可。<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">点击这里</a></p><h3 id="3、用Docker安装kibana"><a href="#3、用Docker安装kibana" class="headerlink" title="3、用Docker安装kibana"></a>3、用Docker安装kibana</h3><p>安装kibana</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana</span><br></pre></td></tr></table></figure><p>启动kibana</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana --link&#x3D;elasticsearch:test  -p 5601:5601 -d kibana:7.2.0</span><br><span class="line">docker start kibana</span><br></pre></td></tr></table></figure><p>启动之后可以打开浏览器输入http://服务器IP地址:5601可以打开kibana的界面。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？&quot;&gt;&lt;a href=&quot;#用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？&quot; class=&quot;headerlink&quot; title=&quot;用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？&quot;&gt;&lt;/a&gt;用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？&lt;/h2&gt;&lt;p&gt;在使用数据库搜索时，我们更多的是基于精确匹配的搜索，并不支持相关性匹配，与精确匹配相比，相关性匹配更贴近人的思维方式，而Elasticsearch支持相关性匹配。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端开发" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>API文档生成工具Swagger2的使用</title>
    <link href="http://yoursite.com/2020/04/03/swagger2/"/>
    <id>http://yoursite.com/2020/04/03/swagger2/</id>
    <published>2020-04-03T03:16:23.000Z</published>
    <updated>2020-04-11T09:22:34.348Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离的开发模式下，前后端系统通过接口进行交互，API接口文档变成了前后端开发人员联系的纽带，变得越来越重要，因此许多的API接口文档自动生成工具开始进入我们的视野。<a id="more"></a>Swagger2是一个规范和完整的框架，用于生成、描述、调用和可视化RESTful风格的Web服务。它能够实时同步api与文档，但它的代码侵入性比较强，会影响正常代码阅读。</p><h2 id="SpringBoot集成Swagger2"><a href="#SpringBoot集成Swagger2" class="headerlink" title="SpringBoot集成Swagger2"></a>SpringBoot集成Swagger2</h2><h3 id="1、在pom-xml中添加依赖"><a href="#1、在pom-xml中添加依赖" class="headerlink" title="1、在pom.xml中添加依赖"></a>1、在pom.xml中添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2、Swagger2配置类"><a href="#2、Swagger2配置类" class="headerlink" title="2、Swagger2配置类"></a>2、Swagger2配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.jenson.ecommerce"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"标题"</span>)</span><br><span class="line">                .description(<span class="string">"相关描述"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"name"</span>,<span class="string">"url"</span>,<span class="string">"email"</span>)) </span><br><span class="line">.version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、在开发中使用相关注解"><a href="#3、在开发中使用相关注解" class="headerlink" title="3、在开发中使用相关注解"></a>3、在开发中使用相关注解</h3><h4 id="1-Api"><a href="#1-Api" class="headerlink" title="(1)@Api"></a>(1)@Api</h4><p>使用在Controller层Api类上，主要属性有tags(标签)、hidden(是否隐藏)、value、authorizations等。</p><h4 id="2-ApiOperation"><a href="#2-ApiOperation" class="headerlink" title="(2)@ApiOperation"></a>(2)@ApiOperation</h4><p>使用在Api类的接口方法上，主要属性有value(接口名称)、notes(注释)、hidden(是否隐藏)、httpMethod、ignoreJsonView、response、responseHeaders等等，某些属性注解可自动识别，无需配置。</p><h4 id="3-ApiImplicitParams、-ApiImplicitParam"><a href="#3-ApiImplicitParams、-ApiImplicitParam" class="headerlink" title="(3)@ApiImplicitParams、@ApiImplicitParam"></a>(3)@ApiImplicitParams、@ApiImplicitParam</h4><p>使用在Api类的接口方法上，对接口参数进行说明，@ApiImplicitParams只有一个属性value，@ApiImplicitParam主要属性有name(参数名称)、value(参数说明)、required(是否必需)、dataType(数据类型)、paramType(参数类型)、dataTypeClass、defaultValue、readOnly等。</p><h4 id="4-ApiModel"><a href="#4-ApiModel" class="headerlink" title="(4)@ApiModel"></a>(4)@ApiModel</h4><p>用在实体类上，主要属性有description(描述)、parent(父类)、subTypes、value、discriminator等。</p><h4 id="5-ApiModelProperty"><a href="#5-ApiModelProperty" class="headerlink" title="(5)@ApiModelProperty"></a>(5)@ApiModelProperty</h4><p>用在实体类属性上，主要属性有access、accessMode、allowableValues、allowEmptyValue(是否允许为空)、dataType(数据类型)、example(示例)、hidden(是否隐藏)、name(名称)、notes、required(是否必需)、value(说明)等。</p><p>注意：要保证实体类属性都有相应的get、set方法，否则swagger-ui页面无该属性说明。</p><h3 id="4、打开swagger-ui界面"><a href="#4、打开swagger-ui界面" class="headerlink" title="4、打开swagger-ui界面"></a>4、打开swagger-ui界面</h3><p>运行项目后，登录localhost:项目端口号/swagger-ui.html。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前后端分离的开发模式下，前后端系统通过接口进行交互，API接口文档变成了前后端开发人员联系的纽带，变得越来越重要，因此许多的API接口文档自动生成工具开始进入我们的视野。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前后端分离" scheme="http://yoursite.com/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
    
      <category term="API文档自动生成工具" scheme="http://yoursite.com/tags/API%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="前后端分离" scheme="http://yoursite.com/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>了解MVVM，从Vue实例出发</title>
    <link href="http://yoursite.com/2020/03/30/mvvm/"/>
    <id>http://yoursite.com/2020/03/30/mvvm/</id>
    <published>2020-03-30T05:12:15.731Z</published>
    <updated>2020-04-11T09:22:22.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVVM的由来"><a href="#MVVM的由来" class="headerlink" title="MVVM的由来"></a>MVVM的由来</h2><p>在过去的几年中，我们已经把很多传统的服务端代码放到了浏览器中，这样就产生了成千上万行的javascript代码，它们连接了各式各样的HTML 和CSS文件，但缺乏正规的组织形式，这也就是为什么越来越多的开发者使用javascript框架。比如：angular、react、vue。<a id="more"></a>浏览器的兼容性问题已经不再是前端的阻碍。前端的项目越来越大，项目的可维护性和扩展性、安全性等成了主要问题。当年为了解决浏览器兼容性问题，出现了很多类库，其中最典型的就是jquery。但是这类库没有实现对业务逻辑的分成，所以维护性和扩展性极差。综上两方面原因，才有了MVVM模式一类框架的出现。比如vue,通过数据的双向绑定，极大了提高了开发效率。</p><h2 id="MVVM的概述"><a href="#MVVM的概述" class="headerlink" title="MVVM的概述"></a>MVVM的概述</h2><p>MVVM是Model-View-ViewModel的简写，它是一种前端视图层的分层开发思想，Model指的是传递的数据，View指的是页面的结构，而ViewModel是MVVM模式的核心，它是连接View和Model的桥梁，当数据变化时ViewModel能够监听到，然后使对应的视图做出自动更新，当视图变化使ViewModel也能监听到，从而使数据自动更新，这就实现了数据的双向绑定，这也是MVVM思想的好处。</p><h2 id="采用MVVM模式的框架Vue"><a href="#采用MVVM模式的框架Vue" class="headerlink" title="采用MVVM模式的框架Vue"></a>采用MVVM模式的框架Vue</h2><p>  Vue是一套用于构建用户界面的渐进式JavaScript框架，只关注视图层，方便与第三方库或既有项目整合</p><p>代码实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bin/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Vue实例所控制的这个元素区域，就是我们的V--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//创建一个Vue实例</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//当我们导入包之后，在浏览器的内存中，就多了一个Vue构造函数</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//new出来的这个vm对象，就是我们MVVM中的VM调度者</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el: <span class="string">'#app'</span>,<span class="comment">//表示当前new的这个Vue实例，要控制页面上的哪个区域</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//这里的data就是MVVM中的M，专门用来存放数据</span></span></span><br><span class="line"><span class="actionscript">data: &#123;<span class="comment">//data属性中，存放的是el要用到的数据</span></span></span><br><span class="line"><span class="actionscript">msg: <span class="string">'HelloWorld'</span><span class="comment">//通过Vue提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;）</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MVVM的由来&quot;&gt;&lt;a href=&quot;#MVVM的由来&quot; class=&quot;headerlink&quot; title=&quot;MVVM的由来&quot;&gt;&lt;/a&gt;MVVM的由来&lt;/h2&gt;&lt;p&gt;在过去的几年中，我们已经把很多传统的服务端代码放到了浏览器中，这样就产生了成千上万行的javascript代码，它们连接了各式各样的HTML 和CSS文件，但缺乏正规的组织形式，这也就是为什么越来越多的开发者使用javascript框架。比如：angular、react、vue。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
</feed>
