<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Elasticsearch的使用</title>
    <url>/2020/04/04/note3/</url>
    <content><![CDATA[<h2 id="用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？"><a href="#用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？" class="headerlink" title="用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？"></a>用数据库可以实现搜索功能，为什么还需要Elasticsearch呢？</h2><p>在使用数据库搜索时，我们更多的是基于精确匹配的搜索，并不支持相关性匹配，与精确匹配相比，相关性匹配更贴近人的思维方式，而Elasticsearch支持相关性匹配。<br>搜索引擎不只是搜索，还有分析，分析数据的能力，是建立在快速的查询上的，而Elasticsearch之所以能够快速查询，是因为Elasticsearch基于倒排索引，对于文档搜索来说，倒排索引在性能和空间上都有更加明显的优势。Elastic的优势还有：支持中文分词插件。</p>
<a id="more"></a>
<p>注：Elasticsearch存储数据的方式是文档存储，把对象原原本本地放进去，取出时直接取出。</p>
<h2 id="在Linux上使用docker安装Elasticsearch"><a href="#在Linux上使用docker安装Elasticsearch" class="headerlink" title="在Linux上使用docker安装Elasticsearch"></a>在Linux上使用docker安装Elasticsearch</h2><h3 id="1、安装Docker"><a href="#1、安装Docker" class="headerlink" title="1、安装Docker"></a>1、安装Docker</h3><p>Docker要求CentOS系统的内核版本高于3.10.<br>查看你当前的内核版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>
<p>若内核版本较低，可升级内核</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>
<p>安装Docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure>
<p>设置Docker为开机启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
<p>启动Docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="2、在Docker上部署Elasticsearch"><a href="#2、在Docker上部署Elasticsearch" class="headerlink" title="2、在Docker上部署Elasticsearch"></a>2、在Docker上部署Elasticsearch</h3><h4 id="2-1、安装Elasticsearch"><a href="#2-1、安装Elasticsearch" class="headerlink" title="2.1、安装Elasticsearch"></a>2.1、安装Elasticsearch</h4><p>下载Elasticsearch镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch</span><br></pre></td></tr></table></figure>
<p>查看镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p>运行Elasticsearch镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS&#x3D;&quot;-Xms256m -Xmx256m&quot; -d -p 9200:9200 -p 9300:9300 --name containerName imageId</span><br></pre></td></tr></table></figure>
<p>查看正在运行的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>在浏览器中打开http://服务器IP地址:9200,如果看到以下信息则说明安装成功</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"530dd7820315"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"docker-cluster"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"7O0fjpBJTkmn_axwmZX0RQ"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"7.2.0"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"508c38a"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2019-06-20T15:54:18.811730Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"8.0.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2、修改配置，解决跨域访问问题"><a href="#2-2、修改配置，解决跨域访问问题" class="headerlink" title="2.2、修改配置，解决跨域访问问题"></a>2.2、修改配置，解决跨域访问问题</h4><p>首先进入到容器中，然后进入到指定目录修改elasticsearch.yml文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it elasticsearch &#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;</span><br><span class="line">vi elasticsearch.yml</span><br></pre></td></tr></table></figure>
<p>在elasticsearch.yml的文件末尾加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>
<p>修改配置后重启容器即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure>

<h4 id="2-3、安装ik分词器"><a href="#2-3、安装ik分词器" class="headerlink" title="2.3、安装ik分词器"></a>2.3、安装ik分词器</h4><p>es自带的分词器对中文分词不是很友好，所以我们下载开源的IK分词器来解决这个问题。首先进入到plugins目录中下载分词器，下载完成后然后解压，在重启es即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins&#x2F;</span><br><span class="line">elasticsearch-plugin install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v7.2.0&#x2F;elasticsearch-analysis-ik-7.2.0.zip</span><br><span class="line">exit</span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure>
<p>注意：elasticsearch的版本和ik分词器的版本需要保持一致，不然在重启时会失败。可以在这查看所有版本，选择适合自己版本的右键复制链接地址即可。点击这里[<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases]" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases]</a></p>
<h3 id="3、用Docker安装kibana"><a href="#3、用Docker安装kibana" class="headerlink" title="3、用Docker安装kibana"></a>3、用Docker安装kibana</h3><p>安装kibana</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull kibana</span><br></pre></td></tr></table></figure>
<p>启动kibana</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name kibana --link&#x3D;elasticsearch:test  -p 5601:5601 -d kibana:7.2.0</span><br><span class="line">docker start kibana</span><br></pre></td></tr></table></figure>
<p>启动之后可以打开浏览器输入http://服务器IP地址:5601可以打开kibana的界面。</p>
]]></content>
      <tags>
        <tag>Elasricsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>API文档生成工具Swagger2的使用</title>
    <url>/2020/04/03/note2/</url>
    <content><![CDATA[<p>在前后端分离的开发模式下，前后端系统通过接口进行交互，API接口文档变成了前后端开发人员联系的纽带，变得越来越重要，因此许多的API接口文档自动生成工具开始进入我们的视野。Swagger2是一个规范和完整的框架，用于生成、描述、调用和可视化RESTful风格的Web服务。它能够实时同步api与文档，但它的代码侵入性比较强，会影响正常代码阅读。</p>
<a id="more"></a>
<h2 id="SpringBoot集成Swagger2"><a href="#SpringBoot集成Swagger2" class="headerlink" title="SpringBoot集成Swagger2"></a>SpringBoot集成Swagger2</h2><h3 id="1、在pom-xml中添加依赖"><a href="#1、在pom-xml中添加依赖" class="headerlink" title="1、在pom.xml中添加依赖"></a>1、在pom.xml中添加依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2、Swagger2配置类"><a href="#2、Swagger2配置类" class="headerlink" title="2、Swagger2配置类"></a>2、Swagger2配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.jenson.ecommerce"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"标题"</span>)</span><br><span class="line">                .description(<span class="string">"相关描述"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"name"</span>,<span class="string">"url"</span>,<span class="string">"email"</span>)) </span><br><span class="line">		.version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、在开发中使用相关注解"><a href="#3、在开发中使用相关注解" class="headerlink" title="3、在开发中使用相关注解"></a>3、在开发中使用相关注解</h3><h4 id="1-Api"><a href="#1-Api" class="headerlink" title="(1)@Api"></a>(1)@Api</h4><p>使用在Controller层Api类上，主要属性有tags(标签)、hidden(是否隐藏)、value、authorizations等。</p>
<h4 id="2-ApiOperation"><a href="#2-ApiOperation" class="headerlink" title="(2)@ApiOperation"></a>(2)@ApiOperation</h4><p>使用在Api类的接口方法上，主要属性有value(接口名称)、notes(注释)、hidden(是否隐藏)、httpMethod、ignoreJsonView、response、responseHeaders等等，某些属性注解可自动识别，无需配置。</p>
<h4 id="3-ApiImplicitParams、-ApiImplicitParam"><a href="#3-ApiImplicitParams、-ApiImplicitParam" class="headerlink" title="(3)@ApiImplicitParams、@ApiImplicitParam"></a>(3)@ApiImplicitParams、@ApiImplicitParam</h4><p>使用在Api类的接口方法上，对接口参数进行说明，@ApiImplicitParams只有一个属性value，@ApiImplicitParam主要属性有name(参数名称)、value(参数说明)、required(是否必需)、dataType(数据类型)、paramType(参数类型)、dataTypeClass、defaultValue、readOnly等。</p>
<h4 id="4-ApiModel"><a href="#4-ApiModel" class="headerlink" title="(4)@ApiModel"></a>(4)@ApiModel</h4><p>用在实体类上，主要属性有description(描述)、parent(父类)、subTypes、value、discriminator等。</p>
<h4 id="5-ApiModelProperty"><a href="#5-ApiModelProperty" class="headerlink" title="(5)@ApiModelProperty"></a>(5)@ApiModelProperty</h4><p>用在实体类属性上，主要属性有access、accessMode、allowableValues、allowEmptyValue(是否允许为空)、dataType(数据类型)、example(示例)、hidden(是否隐藏)、name(名称)、notes、required(是否必需)、value(说明)等。</p>
<p>注意：要保证实体类属性都有相应的get、set方法，否则swagger-ui页面无该属性说明。</p>
<h3 id="4、打开swagger-ui界面"><a href="#4、打开swagger-ui界面" class="headerlink" title="4、打开swagger-ui界面"></a>4、打开swagger-ui界面</h3><p>运行项目后，登录localhost:项目端口号/swagger-ui.html。</p>
]]></content>
      <tags>
        <tag>API文档自动生成工具</tag>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>了解MVVM，从Vue实例出发</title>
    <url>/2020/03/30/note1/</url>
    <content><![CDATA[<h2 id="MVVM的由来"><a href="#MVVM的由来" class="headerlink" title="MVVM的由来"></a>MVVM的由来</h2><p>在过去的几年中，我们已经把很多传统的服务端代码放到了浏览器中，这样就产生了成千上万行的javascript代码，它们连接了各式各样的HTML 和CSS文件，但缺乏正规的组织形式，这也就是为什么越来越多的开发者使用javascript框架。比如：angular、react、vue。浏览器的兼容性问题已经不再是前端的阻碍。前端的项目越来越大，项目的可维护性和扩展性、安全性等成了主要问题。当年为了解决浏览器兼容性问题，出现了很多类库，其中最典型的就是jquery。但是这类库没有实现对业务逻辑的分成，所以维护性和扩展性极差。综上两方面原因，才有了MVVM模式一类框架的出现。比如vue,通过数据的双向绑定，极大了提高了开发效率。</p>
<a id="more"></a>
<h2 id="MVVM的概述"><a href="#MVVM的概述" class="headerlink" title="MVVM的概述"></a>MVVM的概述</h2><p>MVVM是Model-View-ViewModel的简写，它是一种前端视图层的分层开发思想，Model指的是传递的数据，View指的是页面的结构，而ViewModel是MVVM模式的核心，它是连接View和Model的桥梁，当数据变化时ViewModel能够监听到，然后使对应的视图做出自动更新，当视图变化使ViewModel也能监听到，从而使数据自动更新，这就实现了数据的双向绑定，这也是MVVM思想的好处。</p>
<h2 id="采用MVVM模式的框架Vue"><a href="#采用MVVM模式的框架Vue" class="headerlink" title="采用MVVM模式的框架Vue"></a>采用MVVM模式的框架Vue</h2><p>  Vue是一套用于构建用户界面的渐进式JavaScript框架，只关注视图层，方便与第三方库或既有项目整合</p>
<p>代码实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--导入Vue的包--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bin/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--Vue实例所控制的这个元素区域，就是我们的V--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="comment">//创建一个Vue实例</span></span></span><br><span class="line"><span class="actionscript">		<span class="comment">//当我们导入包之后，在浏览器的内存中，就多了一个Vue构造函数</span></span></span><br><span class="line"><span class="actionscript">		<span class="comment">//new出来的这个vm对象，就是我们MVVM中的VM调度者</span></span></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">			el: <span class="string">'#app'</span>,			<span class="comment">//表示当前new的这个Vue实例，要控制页面上的哪个区域</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">//这里的data就是MVVM中的M，专门用来存放数据</span></span></span><br><span class="line"><span class="actionscript">			data: &#123;			<span class="comment">//data属性中，存放的是el要用到的数据</span></span></span><br><span class="line"><span class="actionscript">				msg: <span class="string">'HelloWorld'</span>	<span class="comment">//通过Vue提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了</span></span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;）</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MVVM</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
